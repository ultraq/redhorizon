/*
 * Copyright 2015, Emanuel Rabina (http://www.ultraq.net.nz/)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
	id 'redhorizon-build'
}

description = 'Code that bridges the classic C&C file formats for use with the Red Horizon engine'

// @formatter:off
configure {
	asGroovyLibraryProject()
		.withGroovydocOptions() {
			overviewText = resources.text.fromString('''
				A module that bridges the classic C&C file formats for use with the Red Horizon
				engine.  All of the reverse engineering of the old codecs and files takes place
				here, and serve as working examples for other programmers.
			''')
			// Can't link to these until they get published on maven central themselves
//			link("https://javadoc.io/doc/nz.net.ultraq.redhorizon/redhorizon-events/${version}/", 'nz.net.ultraq.redhorizon.events.')
//			link("https://javadoc.io/doc/nz.net.ultraq.redhorizon/redhorizon-filetypes/${version}/", 'nz.net.ultraq.redhorizon.filetypes.')
		}
		.withShadowJar() {
			archiveClassifier = ''
			dependencies {
				include project(':redhorizon-engine')
				include project(':redhorizon-filetypes')
			}
		}
		.withSourcesJar()
		.withGroovydocJar()
		.configureSource()
			.withDependencies() {
				implementation project(':redhorizon-audio')
				implementation project(':redhorizon-engine')
				implementation project(':redhorizon-filetypes')
				implementation project(':redhorizon-graphics')
				implementation project(':redhorizon-input')
				implementation "nz.net.ultraq:event-horizon:${eventHorizonVersion}"
				implementation "org.apache.groovy:groovy-json:${groovyVersion}"
				implementation "org.joml:joml-primitives:${jomlPrimitivesVersion}"
			}
		.configureVerification()
			.withTestDependencies() {
				testImplementation "org.slf4j:slf4j-simple:${slf4jVersion}"
			}

	createMavenPublication()
		.withArtifacts(shadowJar, sourcesJar, groovydocJar)
		.configurePom() {
			url = 'https://github.com/ultraq/redhorizon'
			inceptionYear = '2007'

			// Have to manually remove the project nodes since shadow won't do that for us
			afterEvaluate {
				withXml {
					var projectDependencyNodes = []
					asNode().depthFirst { node ->
						if (node.name().localPart == 'dependency' && node.get('groupId').text() == 'nz.net.ultraq.redhorizon') {
							projectDependencyNodes << node
						}
					}
					projectDependencyNodes.each { node ->
						node.parent().remove(node)
					}
				}
			}
		}
		.useApache20License()
		.withGitHubScm('ultraq')
		.withDevelopers([
			name: 'Emanuel Rabina',
			email: 'emanuelrabina@gmail.com',
			url: 'https://www.ultraq.net.nz'
		])
}
// @formatter:on

// Disable module metadata while publishing fat jars - it's incorrect for what we're shipping
tasks.withType(GenerateModuleMetadata).configureEach {
	enabled = false
}
