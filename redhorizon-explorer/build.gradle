/* 
 * Copyright 2021, Emanuel Rabina (http://www.ultraq.net.nz/)
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.gradle.internal.os.OperatingSystem

apply plugin: 'application'

def os = OperatingSystem.current()
def swtArtifact =
	os == OperatingSystem.MAC_OS ?  'org.eclipse.swt.cocoa.macosx.x86_64' :
	os == OperatingSystem.WINDOWS ? 'org.eclipse.swt.win32.win32.x86_64' :
	os == OperatingSystem.LINUX ?   'org.eclipse.swt.gtk.linux.x86_64' :
	null
def swtVersion = '3.116.0'

// Fix up the ${osgi.platform} value inside the SWT Maven files
configurations.all {
	resolutionStrategy {
		dependencySubstitution {
			if (os == OperatingSystem.MAC_OS) {
				substitute module('org.eclipse.platform:org.eclipse.swt.${osgi.platform}') with module("org.eclipse.platform:org.eclipse.swt.cocoa.macosx.x86_64:${swtVersion}")
			}
			else if (os == OperatingSystem.WINDOWS) {
				substitute module('org.eclipse.platform:org.eclipse.swt.${osgi.platform}') with module("org.eclipse.platform:org.eclipse.swt.win32.win32.x86_64:${swtVersion}")
			}
			else if (os == OperatingSystem.LINUX) {
				substitute module('org.eclipse.platform:org.eclipse.swt.${osgi.platform}') with module("org.eclipse.platform:org.eclipse.swt.gtk.linux.x86_64:${swtVersion}")
			}
		}
	}
}

dependencies {
	implementation(
		project(':redhorizon-classic'),
		project(':redhorizon-engine'),
		project(':redhorizon-events'),
		project(':redhorizon-extensions'),
		project(':redhorizon-filetypes'),
		platform('org.lwjgl:lwjgl-bom:3.2.3'),
		"ch.qos.logback:logback-classic:${logbackVersion}",
		"info.picocli:picocli:${picocliVersion}",
		"io.github.spair:imgui-java-binding:${imguiVersion}",
		"io.github.spair:imgui-java-lwjgl3:${imguiVersion}",
		"org.eclipse.platform:${swtArtifact}:${swtVersion}",
		"org.joml:joml:${jomlVersion}",
		"org.joml:joml-primitives:${jomlPrimitivesVersion}",
		'org.lwjgl:lwjgl',
		'org.lwjgl:lwjgl-glfw'
	)
	implementation('nz.net.ultraq.preferences:preferences:3.0.0-SNAPSHOT') {
		exclude module: 'groovy'
	}
	runtimeOnly(
		"io.github.spair:imgui-java-natives-macos-ft:${imguiVersion}",
		"io.github.spair:imgui-java-natives-windows-ft:${imguiVersion}",
		'org.lwjgl:lwjgl::natives-macos',
		'org.lwjgl:lwjgl::natives-windows',
		'org.lwjgl:lwjgl-glfw::natives-macos',
		'org.lwjgl:lwjgl-glfw::natives-windows'
	)
}

application {
	mainClass = 'nz.net.ultraq.redhorizon.explorer.ExplorerCli'
	applicationName = 'explorer'
	applicationDefaultJvmArgs = [
		"-Dredhorizon.version=${version}",
		'-Dorg.lwjgl.system.stackSize=10240'
	]
}

startScripts {
	unixStartScriptGenerator = new CustomUnixStartScriptGenerator(generator: unixStartScriptGenerator)
}

class CustomUnixStartScriptGenerator implements ScriptGenerator {
	@Delegate
	ScriptGenerator generator
	@Override
	void generateScript(JavaAppStartScriptGenerationDetails details, Writer writer) {
		details.defaultJvmOpts.add(0, '-XstartOnFirstThread')
		generator.generateScript(details, writer)
	}
}
