/* 
 * Copyright 2007, Emanuel Rabina (http://www.ultraq.net.nz/)
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.gradle.internal.os.OperatingSystem

plugins {
	id 'distribution'
}

def os = OperatingSystem.current()
def targetPlatform = findProperty('targetPlatform') ?:
	os == OperatingSystem.MAC_OS ? 'macos' :
	os == OperatingSystem.WINDOWS ? 'windows' :
	System.getenv('CI') as boolean ? 'linux' :
	null

// Global configuration
allprojects {
	group = 'nz.net.ultraq.redhorizon'
	version = '0.34.1-SNAPSHOT'
}

// Root project configuration
description = 'Recreating the original 2D Command & Conquer games'

distributions {
	main {
		contents {
			duplicatesStrategy = DuplicatesStrategy.EXCLUDE
			from('redhorizon-cli/build/install/redhorizon') {
				if (targetPlatform == 'windows') {
					exclude 'bin/redhorizon'
				}
				else {
					exclude 'bin/redhorizon.bat'
				}
			}
			from('redhorizon-explorer/build/install/explorer') {
				if (targetPlatform == 'windows') {
					exclude 'bin/explorer'
				}
				else {
					exclude 'bin/explorer.bat'
				}
			}
			from('.') {
				include 'CHANGELOG.md'
				include 'LICENSE.txt'
				include 'README.md'
			}
		}
	}
}

distTar {
	enabled = false
}

distZip {
	dependsOn ':redhorizon-cli:installDist', ':redhorizon-explorer:installDist'
	archiveClassifier = targetPlatform
}

// Subproject configuration
subprojects {
	apply plugin: 'groovy'
	apply plugin: 'idea'
	apply from: 'https://raw.githubusercontent.com/ultraq/gradle-support/4.0.0/gradle-support.gradle'

	sourceCompatibility = 11
//	configurations.all {
//		resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
//		resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
//	}

	ext {
		groovyVersion = '3.0.9'
		imguiVersion = '1.86.0'
		jomlVersion = '1.10.2'
		jomlPrimitivesVersion = '1.10.0'
		logbackVersion = '1.2.10'
		lwjglVersion = '3.3.0'
		picocliVersion = '4.6.2'
		reflectionsVersion = '0.10.2'
		slf4jVersion = '1.7.32'
	}
	ext.targetPlatform = targetPlatform

	// Replace all uses of the standard Groovy library with the invokedynamic one
	configurations.all {
		resolutionStrategy.dependencySubstitution {
			substitute module("org.codehaus.groovy:groovy") using module("org.codehaus.groovy:groovy:${groovyVersion}") withClassifier('indy')
		}
	}

	dependencies {
		implementation(
			'nz.net.ultraq.extensions:groovy-extensions:1.1.0',
			'nz.net.ultraq.extensions:profiling-extensions:0.6.1',
			"org.codehaus.groovy:groovy:${groovyVersion}:indy",
			"org.slf4j:slf4j-api:${slf4jVersion}"
		)
		testImplementation(
			'org.spockframework:spock-core:2.0-groovy-3.0'
		)
		testRuntimeOnly(
			"org.slf4j:slf4j-nop:${slf4jVersion}"
		)
	}

	compileGroovy {
		groovyOptions.optimizationOptions.indy = true
	}

	test {
		useJUnitPlatform()
	}
}
