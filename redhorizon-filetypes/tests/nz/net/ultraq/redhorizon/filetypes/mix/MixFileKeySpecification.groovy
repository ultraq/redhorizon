/*
 * Copyright 2020, Emanuel Rabina (http://www.ultraq.net.nz/)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package nz.net.ultraq.redhorizon.filetypes.mix

import spock.lang.Specification

import java.nio.ByteBuffer

/**
 * An attempt to capture inputs/outputs of the MixFileKey code to wrap in unit
 * tests for being able to translate the C++ to Groovy one day.
 * 
 * @author Emanuel Rabina
 */
class MixFileKeySpecification extends Specification {

	def "Voices_Allies.mix"() {
		given:
			def source = ByteBuffer.wrapNative([
			  0x07, 0x88, 0x31, 0x01, 0x99, 0x18, 0x8B, 0xB4, 0xDF, 0x89,
				0x47, 0x2B, 0xF9, 0x5A, 0xD0, 0xFF, 0x15, 0x22, 0xFC, 0xD7,
				0x12, 0x5C, 0x13, 0xC4, 0x02, 0xA5, 0x7A, 0x0F, 0x85, 0xEA,
				0x11, 0xB2, 0xCB, 0xC9, 0x95, 0x33, 0x4F, 0xCE, 0x88, 0x16,
				0x18, 0x46, 0x07, 0x4B, 0xFF, 0x25, 0x7E, 0xE1, 0x86, 0x44,
				0x22, 0xEE, 0xA5, 0x9C, 0x90, 0x1D, 0x05, 0x0B, 0x91, 0xA9,
				0x70, 0xBC, 0xE3, 0xE2, 0xCB, 0x3B, 0x56, 0x10, 0xBD, 0xD5,
				0x13, 0x27, 0x3C, 0xA6, 0x85, 0xDE, 0xC2, 0xA0, 0x00, 0x3B
			] as byte[])
			def dest = ByteBuffer.allocateNative(56)

		when:
			MixFileKey.getBlowfishKey(source, dest)

		then:
			dest.array() == [
			  0x8A, 0xE1, 0xD0, 0xFD, 0x25, 0xB9, 0x67, 0xA7,
				0x94, 0x99, 0xC1, 0x22, 0x87, 0x95, 0x6C, 0x24,
				0x22, 0x51, 0xA5, 0x9C, 0xAF, 0x89, 0x06, 0x03,
				0xE3, 0xEF, 0xE0, 0xA8, 0x0C, 0x67, 0x91, 0x09,
				0x67, 0x76, 0xBE, 0xAF, 0xBB, 0x85, 0x5F, 0x9F,
				0xF3, 0xA0, 0xA5, 0x61, 0x10, 0x92, 0x28, 0x57,
				0x2C, 0x99, 0x4B, 0xD8, 0x1A, 0xCF, 0x17, 0x5C
			] as byte[]
	}
}
